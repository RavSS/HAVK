PRAGMA License(GPL);

PRAGMA SPARK_Mode(on);
PRAGMA Normalize_Scalars;

-- TODO: What's the proper way to tell `gnatprove` of hardware effects without
-- setting variables as volatile with async_* or effective_* aspects?
PRAGMA Warnings(GNATprove, off, "subprogram * has no effect",
   Reason => "Most of these warnings don't know of hardware interactions.");

PRAGMA Warnings(GNATprove, off, "*implementation-defined*",
   Reason => "We're only using GNAT on x86-64. This likely doesn't matter.");

-- TODO: In the future, make the System.Address type public instead so
-- this does not have to be used.
PRAGMA Allow_Integer_Address;

PRAGMA Assertion_Policy(CHECK);
PRAGMA Convention_Identifier(NASM, Assembler);
PRAGMA Overflow_Mode(MINIMIZED, MINIMIZED);

PRAGMA Restrictions(No_Access_Parameter_Allocators);
PRAGMA Restrictions(No_Allocators);
PRAGMA Restrictions(No_Anonymous_Allocators);
PRAGMA Restrictions(No_Calendar);
PRAGMA Restrictions(No_Delay);
PRAGMA Restrictions(No_Direct_Boolean_Operators);
PRAGMA Restrictions(No_Dispatching_Calls);
PRAGMA Restrictions(No_Dynamic_Attachment);
PRAGMA Restrictions(No_Enumeration_Maps);
PRAGMA Restrictions(No_Exception_Handlers);
PRAGMA Restrictions(No_Exception_Propagation);
PRAGMA Restrictions(No_Exception_Registration);
PRAGMA Restrictions(No_Finalization);
PRAGMA Restrictions(No_Implicit_Dynamic_Code); -- Impacts `-mindirect-branch`?
PRAGMA Restrictions(No_Implicit_Heap_Allocations);
PRAGMA Restrictions(No_Implicit_Task_Allocations);
PRAGMA Restrictions(No_IO);
PRAGMA Restrictions(No_Local_Allocators);
PRAGMA Restrictions(No_Nested_Finalization);
PRAGMA Restrictions(No_Obsolescent_Features);
PRAGMA Restrictions(No_Protected_Types);
PRAGMA Restrictions(No_Relative_Delay);
PRAGMA Restrictions(No_Streams);
PRAGMA Restrictions(No_Task_Attributes_Package);
PRAGMA Restrictions(No_Task_Termination);
PRAGMA Restrictions(No_Tasking);
PRAGMA Restrictions(No_Wide_Characters);
PRAGMA Restrictions(Static_Priorities);
PRAGMA Restrictions(Static_Storage_Size);

-------------------------------------------------------------------------------
-- Program         -- The HAVK Operating System                              --
-- Filename        -- HAVK.gpr                                               --
-- License         -- GNU General Public License version 3.0                 --
-- Original Author -- Ravjot Singh Samra, Copyright 2019-2020                --
-------------------------------------------------------------------------------

PROJECT HAVK
IS
   FOR Default_Language USE "Ada";
   FOR Languages        USE("Ada", "ASM");
   FOR Source_Dirs      USE("./ada/", "./ada_specifications/", "./assembly/");
   FOR Object_Dir       USE "./../build/";
   FOR Exec_Dir         USE "./";
   FOR Main             USE("havk_phase_i.adb");
   -- Object directory must contain "adainclude" (RTS files) and "adalib".
   FOR Runtime("Ada")   USE HAVK'Object_Dir;

   TYPE Kernel_Type IS("Final", "Debug");
   Build : Kernel_Type := EXTERNAL("Build");

   -- NOTE: Do not include extra spaces in the switches or else `gprbuild`
   -- will fail to parse them properly.

   PACKAGE Naming
   IS
      -- Switch the suffix from ".s" to ".S". The latter indicates that the
      -- assembly file has not gone through preprocessing before being passed
      -- to the compiler/driver.
      FOR Body_Suffix("ASM") USE ".S";
   END Naming;

   PACKAGE Prove
   IS -- `gnatprove`
      Ada_Proof_Switches :=
        (-- Use all CPU cores to speed up the provers.
         "-j0",
         -- Output assumption info in the build directory.
         "--assumptions",
         -- Strict interpretation of Ada to the standard.
         "--pedantic",
         -- Useful CWE identifiers for various issues and vulnerabilities.
         "--cwe",
         -- Highest/most powerful proof level. It's not too much slower.
         "--level=4",
         -- Prove absolutely everything.
         "--mode=all",
         -- Give warnings about proofs if there are any.
         "--proof-warnings",
         -- All range check failures and warnings are treated as errors.
         "--checks-as-errors", "--warnings=error",
         -- No memory limit.
         "--memlimit=0");

      FOR Proof_Dir             USE HAVK'Object_Dir;
      FOR Proof_Switches("Ada") USE
         Ada_Proof_Switches;
   END Prove;

   PACKAGE Builder
   IS -- `gprbuild`
      Ada_Basic_Switches :=
        (-- May as well use the latest version of Ada, there is no harm in it.
         "-gnat2012",
         -- Strictly 7-bit ASCII only in source code. Disallow the upper
         -- half of the byte for the extra ISO 8859-1 (Latin-1) characters.
         "-gnatin",
         -- Disable the style enforcement and configure it later.
         "-gnatyN",
         -- Enable all warnings by default.
         "-gnatwa", "-gnatw.e",
         -- All runtime errors are not just warnings, but static errors.
         -- No idea why this is not enabled by default.
         "-gnatwE",
         -- Elaboration issues now raise a warning.
         "-gnatwl",
         -- Enable subprogram inlining, but don't give the aggression value,
         -- as we can let the optimisation level handle that.
         "-gnatn",
         -- Enable GNAT warnings.
         "-gnatw.g",
         -- Raise warnings about gaps inside representation clauses.
         "-gnatw.h",
         -- If a specified size is overridden, then mention it.
         "-gnatw.s",
         -- Disable exception propagation warnings.
         "-gnatw.X",
         -- No standard library since HAVK is a freestanding program
         -- without "-ffreestanding".
         "-nostdlib",
         -- No standard include paths.
         "-nostdinc");

      Ada_Style_Switches :=
        (-- Indentation of 3 spaces. I would have really liked to stick to
         -- tabs with 8 character width, but it doesn't seem to
         -- suit Ada at a column length of around 80.
         "-gnaty3",
         -- Array length attributes e.g. "range" must indicate the
         -- dimension if the array is multidimensional. By default, Ada
         -- automatically assumes it for singular-dimension arrays, but
         -- it's better to be more terse.
         "-gnatyA",
         -- No blank spaces after semi-colon statement terminations.
         -- Your editor should really handle this.
         "-gnatyb",
         -- A comment must have a single space after the dashes.
         "-gnatyC",
         -- No CRLF line terminators, only LF.
         "-gnatyd",
         -- No vertical tabs, although I don't even know how you would use
         -- them in a source file.
         "-gnatyf",
         -- Disable horizontal tabs as we're just using spaces.
         "-gnatyh",
         -- "THEN" must appear on the same line as "IF" or on a line below
         -- it with a condition above it.
         "-gnatyi",
         -- Set a 79th column limit and then enable it. Same as "-gnatym".
         "-gnatyM79",
         -- Pragmas must be mixed case, aside from "SPARK_Mode".
         "-gnatyp",
         -- All references to identifiers must have the same casing as
         -- the one the identifier was declared with.
         "-gnatyr",
         -- Nothing must come after "THEN" or "ELSE" on the same line.
         "-gnatyS",
         -- Ada subprograms must have specifications.
         "-gnatys",
         -- No unnecessary blank lines.
         "-gnatyu",
         -- Check for unnecessary parentheses, as they are not required.
         "-gnatyx");

      Ada_Final_Switches :=
        (-- No debug information at all for obvious reasons.
         "-g0",
         -- Default validity checks. Specified by default regardless.
         "-gnatVd",
         -- Speed up compilation by not generating some references in
         -- the "ali" files. Also saves a little space.
         "-gnatx");

      Ada_Debug_Switches :=
        (-- Maximum debug information for GDB specifically.
         "-ggdb3",
         -- All validity checks for debugging.
         "-gnatVa",
         -- Creates "rep" files showing the bit representation of types etc.
         "-gnatR2s");

      CASE
         Build
      IS
         WHEN "Final" =>
            FOR Default_Switches("Ada") USE
               Ada_Basic_Switches &
               Ada_Style_Switches &
               Ada_Final_Switches;
         WHEN "Debug" =>
            FOR Default_Switches("Ada") USE
               Ada_Basic_Switches &
               Ada_Style_Switches &
               Ada_Debug_Switches;
      END CASE;

      -- Add my Ada configuration file and apply it everywhere.
      FOR Global_Configuration_Pragmas  USE "./ada_specifications/havk.adc";

      -- Just a default output. The Makefile should control it, so this
      -- is only a fallback.
      FOR Executable("havk.adb")        USE "../build/No_Makefile_HAVK.elf";
      FOR Executable_Suffix             USE ".elf";
   END Builder;

   PACKAGE Compiler
   IS -- `gcc`
      GCC_Basic_Switches :=
        (-- Stack protector fully enabled, because why not. Doesn't seem to
         -- actually do anything that Ada's checks don't do already.
         "-fstack-protector-all",
         -- Add some extra instructions that check if we've gone
         -- over the stack space limit. Usually that just causes an
         -- intense crash like a general page-fault for example.
         -- I believe this "enables" the "STORAGE_ERROR" exception to
         -- be caught or raised, so that means the last chance handler
         -- might be called instead of the general page-fault by the CPU.
         "-fstack-check",
         -- Create a "su" file with information about stack usage (SU).
         -- Useful for checking if a function exceeds the stack space
         -- I've allocated in the entry assembly file.
         "-fstack-usage",
         -- This informs GCC of where the stack ends, so HAVK can appropriately
         -- raise a signal during a stack overflow. I don't think it's very
         -- effective, but assembly is generated where it uses the symbol.
         "-fstack-limit-symbol=__stack_end",
         -- The x86-64 red zone is a problem when handling interrupts as the
         -- stack is shared with the ISR and whatever was executing before.
         "-mno-red-zone",
         -- TODO: There's an issue with debugging for this - later explained.
         -- HAVK is a higher-half kernel that virtually lives in the -2 GiB
         -- address space. The "kernel" model does not allow PIC generation.
         -- It should result in better assembly than with the "large" model.
         "-fno-PIC",
         -- No MMX instructions.
         "-mno-mmx",
         -- No SSE and SSE2 instructions. Please note that SSE and SSE2 are
         -- supported by any CPU that supports long mode, but I've just
         -- disabled them for now.
         "-mno-sse", "-mno-sse2",
         -- Intel syntax for inline x86-64 assembly, since I like it more and
         -- it's less messy. Note that inline assembly won't be used anyway.
         "-masm=intel",
         -- Explicitly mention x86-64, just to be sure.
         "-march=x86-64",
         -- Optimize code for no particular CPU family.
         "-mtune=generic");

      GCC_Debug_Switches :=
        (-- TODO: This allows for a more general and less efficient memory
         -- model, but GDB is able to connect to QEMU with the ability to
         -- debug properly via a working backtrace.
         "-mcmodel=kernel");

      GCC_Final_Switches :=
        (-- TODO: This allows for a more appropriate memory model at the slight
         -- expense of GDB debugging functionality. I don't think there's any
         -- real reason why this couldn't work. Breaking randomly is not
         -- perfect with this, as e.g. sometimes GDB thinks there's a call
         -- inside the HLT instruction intrinsic function, which is inlined and
         -- does not actually contain any (intended) function calls at all.
         "-mcmodel=kernel");

      -- Switches to be used by any files that generate interrupt handlers.
      GCC_Interrupt_Switches :=
        (-- Disable the usage of 80387/x87 instructions as GCC refuses
         -- to create an interrupt handler with the possibility of them being
         -- used in it. Apparently due to unimplemention. I believe this is
         -- because the ancient x87 coprocessors did something with the stack.
         "-mno-80387",
         -- Make sure only the general registers are being utilised.
         "-mgeneral-regs-only");

      GAS_Basic_Switches :=
        (-- Use the AMD64 ISA. This is often default, but specify it anyway.
         "-Wa,-mamd64",
         -- Always output machine code for long mode by default (SysV ABI).
         "-Wa,--64",
         -- Don't suppress any warnings and make them into errors.
         "-Wa,--warn", "-Wa,--fatal-warnings",
         -- Define the stack as non-executable for paging purposes.
         "-Wa,--noexecstack",
         -- For the ".size" directive, raise an error if the size is invalid.
         "-Wa,--size-check=error",
         -- Optimise the machine code for no particular CPU family.
         "-Wa,-mtune=generic64",
         -- Raise an error if certain operands are invalid.
         "-Wa,-moperand-check=error",
         -- GAS supports Intel syntax. Prefer using that at all times.
         "-Wa,-msyntax=intel",
         -- Also use Intel-style mnemonics/instruction names. They're cleaner.
         "-Wa,-mmnemonic=intel",
         -- Avoid the pointless AT&T-style register prefix.
         "-Wa,-mnaked-reg");

      GAS_Debug_Switches :=
        (-- Output debugging information in any preferred format.
         "-Wa,--gen-debug");

      CASE
         Build
      IS
         WHEN "Final" =>
            FOR Default_Switches("Ada") USE
               GCC_Basic_Switches &
               GCC_Final_Switches;
            FOR Switches("havk_kernel-interrupts-{exceptions,irqs}.adb") USE
               GCC_Basic_Switches &
               GCC_Final_Switches &
               GCC_Interrupt_Switches;
            FOR Default_Switches("ASM") USE
               GAS_Basic_Switches;
         WHEN "Debug" =>
            FOR Default_Switches("Ada") USE
               GCC_Basic_Switches &
               GCC_Debug_Switches;
            FOR Switches("havk_kernel-interrupts-{exceptions,irqs}.adb") USE
               GCC_Basic_Switches &
               GCC_Debug_Switches &
               GCC_Interrupt_Switches;
            FOR Default_Switches("ASM") USE
               GAS_Basic_Switches &
               GAS_Debug_Switches;
      END CASE;
   END Compiler;

   PACKAGE Binder
   IS -- `gnatbind`
      FOR Default_Switches("Ada") USE
        (-- Static GNAT run-time.
         "-static",
         -- Check if the source files actually exist and are findable,
         -- otherwise, raise an error.
         "-s", "-E",
         -- TODO: Set the "storage size" or "default task stack size value".
         -- Is this referring to the available stack space? I've just set it
         -- to 64 KiB, which is what I've allocated in the entry assembly file.
         -- Figure this out for sure, please. I think this right now does
         -- nothing since Ada has no control over the primary stack's size.
         "-d65536",
         -- Default secondary stack size is set to 16 KiB.
         "-D16384");
   END Binder;

   PACKAGE Linker
   IS -- `gnatlink`
      Linker_Basic_Switches :=
        (-- Static GNAT run-time.
         "-static",
         -- No standard library initialisation e.g. constructors.
         "-nostartfiles",
         -- The custom linker script to be used which defines the entry
         -- point to the assembly file turned object.
         "-T../src/linker.ld",
         -- Don't generate a build ID. We have no need for this. Some versions
         -- of `ld` make it automatically while others need it to be specified.
         "-Wl,--build-id=none",
         -- Include the GCC library.
         "-lgcc", "-static-libgcc",
         -- The UEFI `AllocatePages()` function allocates pages of size 4 KiB.
         -- Match it here just in case. Should also save some pages.
         "-zcommon-page-size=0x1000", "-zmax-page-size=0x1000",
         -- Specify the main library (libHAVK.a) to be used by the executable.
         "-lHAVK");

      Linker_Final_Switches :=
        (-- Remove any unused dead code and data from the kernel file,
         -- just to make it smaller.
         "-Wl,--gc-sections",
         -- Strip the symbols in the discarded sections.
         "-Wl,--strip-discarded");

      Linker_Debug_Switches :=
        (-- Do not discard any local symbols.
         "-Wl,--discard-none",
         -- The binder source file now is compiled with debug information.
         "-g");

      CASE
         Build
      IS
         WHEN "Final" =>
            FOR Default_Switches("Ada") USE
               Linker_Basic_Switches &
               Linker_Final_Switches;
         WHEN "Debug" =>
            FOR Default_Switches("Ada") USE
               Linker_Basic_Switches &
               Linker_Debug_Switches;
      END CASE;
   END Linker;
END HAVK;

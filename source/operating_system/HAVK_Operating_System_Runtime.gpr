-------------------------------------------------------------------------------
-- Program         -- HAVK Operating System Ada Runtime                      --
-- Filename        -- HAVK_Operating_System_Runtime.gpr                      --
-- License         -- GNU General Public License version 3.0                 --
-- Original Author -- Ravjot Singh Samra, Copyright 2020                     --
-------------------------------------------------------------------------------

-- The operating system's Ada runtime is compiled similarly to the kernel's Ada
-- runtime.
LIBRARY PROJECT HAVK_Operating_System_Runtime
IS
   FOR default_language    USE "Ada";
   FOR languages           USE("Ada", "ASM", "C");
   FOR source_dirs         USE("./include/**");
   FOR object_dir          USE "./../../build/operating_system/";
   FOR exec_dir            USE HAVK_Operating_System_Runtime'object_dir;
   FOR library_name        USE "havk_operating_system_runtime";
   FOR library_kind        USE "static";
   FOR library_src_dir     USE
      HAVK_Operating_System_Runtime'object_dir & "adainclude/";
   FOR library_dir         USE
      HAVK_Operating_System_Runtime'object_dir & "adalib/";
   FOR create_missing_dirs USE "true";

   TYPE runtime_type IS("Final", "Debug");
   Build : runtime_type := EXTERNAL("Build", "Final");

   -- There's a lot of style parameters in the below package's switches, so
   -- I'll override them all.
   PACKAGE Builder
   IS -- `gnatmake`.
      Builder_Basic_Switches :=
        ("-x",
         -- No standard library since HAVK's operating system (and its runtime)
         -- is a freestanding program without "-ffreestanding".
         "-nostdlib",
         -- No standard include paths.
         "-nostdinc");

      FOR switches(OTHERS) USE
         Builder_Basic_Switches;

      -- A separate configuration file is used for the runtime system.
      -- It is not too different.
      FOR global_configuration_pragmas USE
         "./include/ada_runtime/havk_operating_system_runtime.adc";
   END Builder;

   PACKAGE Compiler
   IS -- `gcc`
      GCC_Basic_Switches :=
        (-- Enable stack checking everywhere. The canary value is not stored
         -- in the TLS (since I don't touch the GS and FS base nor implement
         -- kernel level thread-local storage), but rather it's stored in a
         -- global symbol labelled "__stack_chk_guard".
         "-mstack-protector-guard=global", "-fstack-protector-all",
         "-fstack-check",
         -- Create a "su" file with information about stack usage (SU).
         -- Useful for checking if a function exceeds the stack space
         -- I've allocated in the entry assembly file.
         "-fstack-usage",
         -- Use the SSE instruction set(s) to do floating point calculations.
         -- The old x87 instructions are likely emulated at this point and I
         -- have other plans for them anyway, as the MMX registers overlap with
         -- the x87 FPU registers. SSE 2 at a bare minimum is required, which
         -- is almost (if not completely) certain to be available in long mode.
         "-mno-80387", "-mno-mmx", "-msse2", "-mfpmath=sse",
         "-mprefer-vector-width=128",
         -- The current ELF loader expects a small or large code model, but
         -- it's limited to code below 2 GiB, so a small code model is the best
         -- choice so far.
         "-mcmodel=small", "-fno-PIC",
         -- Intel syntax for inline x86-64 assembly, since I like it more
         -- and it's less messy.
         "-masm=intel",
         -- Explicitly mention x86-64, just to be sure.
         "-march=x86-64",
         -- Optimize code for no particular CPU family.
         "-mtune=generic");

      Ada_Basic_Switches :=
        (-- We're compiling parts of GNAT, so this is necessary.
         "-gnatg",
         -- May as well use the latest version of Ada, there is no harm in it.
         "-gnat2012",
         -- Disable the style enforcement for the RTS. It's not written by me
         -- at this stage.
         "-gnatyN",
         -- Enable all warnings by default.
         "-gnatwa",
         -- Disable exception propagation warnings.
         "-gnatw.X");

      Ada_Final_Switches :=
        (-- No debug information at all for obvious reasons.
         "-g0",
         -- Default validity checks. Specified by default regardless.
         "-gnatVd",
         -- Speed up compilation by not generating some references in
         -- the "ali" files. Also saves a little space.
         "-gnatx");

      Ada_Debug_Switches :=
        (-- Maximum debug information for GDB specifically.
         "-ggdb3",
         -- All validity checks for debugging.
         "-gnatVa",
         -- Creates "rep" files showing the bit representation of types etc.
         "-gnatR2s");

      C_Basic_Switches :=
        (-- Using the latest standard of C that GCC supports.
         "-std=c17",
         -- We're dealing with a freestanding environment, as I still haven't
         -- prepared a hosted version of GCC.
         "-ffreestanding");

      C_Debug_Switches :=
        (-- This just defines a preprocessor symbol to indicate the build type.
         -- Some C files are just for debugging purposes as of now.
         "-DDEBUG=1",
         -- For some reason, I need to redefine this here, even when it should
         -- be controlled on the command-line to get debug information.
         "-ggdb3");

      GAS_Basic_Switches :=
        (-- Use the AMD64 ISA. This is often default, but specify it anyway.
         "-Wa,-mamd64",
         -- Always output machine code for long mode by default (SysV ABI).
         "-Wa,--64",
         -- Don't suppress any warnings and make them into errors.
         "-Wa,--warn", "-Wa,--fatal-warnings",
         -- Define the stack as non-executable for paging purposes.
         "-Wa,--noexecstack",
         -- For the ".size" directive, raise an error if the size is invalid.
         "-Wa,--size-check=error",
         -- Optimise the machine code for no particular CPU family.
         "-Wa,-mtune=generic64",
         -- Raise an error if certain operands are invalid.
         "-Wa,-moperand-check=error",
         -- GAS supports Intel syntax. Prefer using that at all times.
         "-Wa,-msyntax=intel",
         -- Also use Intel-style mnemonics/instruction names. They're cleaner.
         "-Wa,-mmnemonic=intel",
         -- Avoid the pointless AT&T-style register prefix.
         "-Wa,-mnaked-reg");

      GAS_Debug_Switches :=
        (-- Output debugging information in any preferred format.
         "-Wa,--gen-debug");

      CASE
         Build
      IS
         WHEN "Final" =>
            FOR default_switches("Ada") USE
               GCC_Basic_Switches &
               Ada_Basic_Switches &
               Ada_Final_Switches;
            FOR default_switches("ASM") USE
               GAS_Basic_Switches;
            FOR default_switches("C")   USE
               GCC_Basic_Switches &
               C_Basic_Switches;
         WHEN "Debug" =>
            FOR default_switches("Ada") USE
               GCC_Basic_Switches &
               Ada_Basic_Switches &
               Ada_Debug_Switches;
            FOR default_switches("ASM") USE
               GAS_Basic_Switches &
               GAS_Debug_Switches;
            FOR default_switches("C")   USE
               GCC_Basic_Switches &
               C_Basic_Switches &
               C_Debug_Switches;
      END CASE;
   END Compiler;
END HAVK_Operating_System_Runtime;

-------------------------------------------------------------------------------
-- Program         -- HAVK Operating System                                  --
-- Filename        -- HAVK_Operating_System_Program.gpr                      --
-- License         -- GNU General Public License version 3.0                 --
-- Original Author -- Ravjot Singh Samra, Copyright 2020                     --
-------------------------------------------------------------------------------

-- An abstract project to be imported/extended by other projects.
ABSTRACT PROJECT HAVK_Operating_System_Program
IS
   FOR source_dirs         USE("./**");
   FOR object_dir          USE "./../../../../build/operating_system/";
   -- TODO: The below attribute is no longer is putting programs into the
   -- specified directory. I have to manually specify this output directory in
   -- the projects that extend this one.
   FOR exec_dir            USE HAVK_Operating_System_Program'object_dir &
      "programs/";
   -- Object directory must contain "adainclude" (RTS files) and "adalib".
   FOR runtime("Ada")      USE HAVK_Operating_System_Program'object_dir;
   FOR create_missing_dirs USE "true";

   TYPE operating_system_type IS("Final", "Debug");
   Build : operating_system_type := EXTERNAL("Build", "Final");

   PACKAGE Metrics
   IS -- `gnatmetric`
      Metrics_Switches :=
        ("--contract-all",
         "--complexity-all",
         "--lines-all", "--lines-spark",
         "--syntax-all");

      FOR default_switches("Ada") USE
         Metrics_Switches;
   END Metrics;

   PACKAGE Prove
   IS -- `gnatprove`
      SPARK_Proof_Switches :=
        (-- Use all CPU cores to speed up the provers.
         "-j0",
         -- Output assumption info in the build directory.
         "--assumptions",
         -- Strict interpretation of Ada to the standard.
         "--pedantic",
         -- Useful CWE identifiers for various issues and vulnerabilities.
         "--cwe",
         -- Highest/most powerful proof level. It's not too much slower.
         -- Let it determine the memory limit, as there does not seem to be
         -- a (speed) benefit in giving an endless memory limit.
         "--level=4",
         -- Prove absolutely everything.
         "--mode=all",
         -- Give warnings about proofs if there are any.
         "--proof-warnings",
         -- All range check failures and warnings are treated as errors.
         "--checks-as-errors", "--warnings=error");

      FOR proof_dir             USE HAVK_Operating_System_Program'object_dir;
      FOR proof_switches("Ada") USE
         SPARK_Proof_Switches;
   END Prove;

   PACKAGE Builder
   IS -- `gnatmake`
      Builder_Basic_Switches :=
        (-- TODO: Still don't have a version of GCC that targets HAVK's user
         -- space. Don't think I will ever need one at this stage, although
         -- it would be very wise to have one instead of doing this.
         "-nostdlib",
         -- No standard include paths.
         "-nostdinc");

      FOR switches(OTHERS) USE
         Builder_Basic_Switches;

      -- Add my Ada configuration file and apply it everywhere.
      FOR global_configuration_pragmas USE
         "./include/ada_specifications/havk_operating_system.adc";

      -- HAVK can only load ELF files as of now, so this is just used for
      -- indication.
      FOR executable_suffix USE ".elf";
   END Builder;

   PACKAGE Compiler
   IS -- `gcc`
      GCC_Basic_Switches :=
        (-- TODO: It seems that the stack protector (or libssp) tries to get
         -- the stack canary via the TLS (at FS:0x28) like how it's done for
         -- the Linux kernel. I haven't encountered this issue with my kernel,
         -- but for some reason, that appears in OS programs but not the kernel
         -- itself. Obviously, this causes a page fault, as I currently do not
         -- use the GS and FS registers for thread local storage etc.
         "-fno-stack-protector",
         -- Create a "su" file with information about stack usage (SU). Useful
         -- for checking if a function exceeds the stack space I've allocated
         -- in the "start.s" assembly file.
         "-fstack-usage",
         -- TODO: The x86-64 red zone is a problem when handling interrupts as
         -- the stack is shared with the ISR and whatever was executing before
         -- in ring 0, but we can remove this once we have set up the IST and
         -- don't have ISRs using the interrupted stack for full ABI support.
         "-mno-red-zone",
         -- HAVK can support both the small and large code models, but for now,
         -- stick to the small one.
         "-fno-PIC", "-mcmodel=small",
         -- Intel syntax for inline x86-64 assembly, since I like it more and
         -- it's less messy. Note that inline assembly won't be used anyway.
         "-masm=intel",
         -- Explicitly mention x86-64, just to be sure.
         "-march=x86-64",
         -- Optimise code for no particular CPU family.
         "-mtune=generic");

      Ada_Basic_Switches :=
        (-- May as well use the latest version of Ada, there is no harm in it.
         "-gnat2012",
         -- Strictly 7-bit ASCII only in source code. Disallow the upper
         -- half of the byte for the extra ISO 8859-1 (Latin-1) characters.
         "-gnatin",
         -- Disable the style enforcement and configure it later.
         "-gnatyN",
         -- Enable all warnings by default.
         "-gnatwa", "-gnatw.e",
         -- All runtime errors are not just warnings, but static errors.
         -- No idea why this is not enabled by default.
         "-gnatwE",
         -- Elaboration issues now raise a warning.
         "-gnatwl",
         -- Enable subprogram inlining, but don't give the aggression value,
         -- as we can let the optimisation level handle that.
         "-gnatn",
         -- Enable GNAT warnings.
         "-gnatw.g",
         -- Raise warnings about gaps inside representation clauses.
         "-gnatw.h",
         -- If a specified size is overridden, then mention it.
         "-gnatw.s",
         -- Output the full file path if an error occurs. Needed, as many
         -- projects use the "main.*" pattern.
         "-gnatef",
         -- Disable exception propagation warnings.
         "-gnatw.X");

      Ada_Style_Switches :=
        (-- Indentation of 3 spaces. I would have really liked to stick to
         -- tabs with 8 character width, but it doesn't seem to
         -- suit Ada at a column length of around 80.
         "-gnaty3",
         -- Array length attributes e.g. "range" must indicate the
         -- dimension if the array is multidimensional. By default, Ada
         -- automatically assumes it for singular-dimension arrays, but
         -- it's better to be more terse.
         "-gnatyA",
         -- Enforce the short-circuit conditional operators instead of the
         -- regular ones. This is also done through the configuration file.
         "-gnatyB",
         -- No blank spaces after semi-colon statement terminations.
         -- Your editor should really handle this.
         "-gnatyb",
         -- A comment must have a single space after the dashes.
         "-gnatyC",
         -- No CRLF line terminators, only LF.
         "-gnatyd",
         -- No vertical tabs, although I don't even know how you would use
         -- them in a source file.
         "-gnatyf",
         -- Disable horizontal tabs as we're just using spaces.
         "-gnatyh",
         -- "THEN" must appear on the same line as "IF" or on a line below
         -- it with a condition above it.
         "-gnatyi",
         -- Set a 79th column limit and then enable it. Same as "-gnatym".
         "-gnatyM79",
         -- Pragmas must be mixed case, aside from "SPARK_Mode".
         "-gnatyp",
         -- All references to identifiers must have the same casing as
         -- the one the identifier was declared with.
         "-gnatyr",
         -- Nothing must come after "THEN" or "ELSE" on the same line.
         "-gnatyS",
         -- Ada subprograms must have specifications.
         "-gnatys",
         -- No unnecessary blank lines.
         "-gnatyu",
         -- Check for unnecessary parentheses, as they are not required.
         "-gnatyx");

      Ada_Final_Switches :=
        (-- No debug information at all for obvious reasons.
         "-g0",
         -- Default validity checks. Specified by default regardless.
         "-gnatVd",
         -- Speed up compilation by not generating some references in
         -- the "ali" files. Also saves a little space.
         "-gnatx");

      Ada_Debug_Switches :=
        (-- Maximum debug information for GDB specifically.
         "-ggdb3",
         -- All validity checks for debugging.
         "-gnatVa",
         -- Creates "rep" files showing the bit representation of types etc.
         "-gnatR2s");

      C_Basic_Switches :=
        (-- Using the latest standard of C that GCC supports.
         "-std=c17",
         -- We're dealing with a freestanding environment, as I still haven't
         -- prepared a hosted version of GCC.
         "-ffreestanding",
         -- Include the header files for the C runtime. I could not figure out
         -- how to do it with the "include_*" or the "runtime" attributes.
         "-I./../../../source/operating_system/include/c_runtime/");

      C_Debug_Switches :=
        (-- This just defines a preprocessor symbol to indicate the build type.
         -- Some C files are just for debugging purposes as of now.
         "-DDEBUG=1",
         -- For some reason, I need to redefine this here, even when it should
         -- be controlled on the command-line to get debug information.
         "-ggdb3");

      GAS_Basic_Switches :=
        (-- Use the AMD64 ISA. This is often default, but specify it anyway.
         "-Wa,-mamd64",
         -- Always output machine code for long mode by default (SysV ABI).
         "-Wa,--64",
         -- Don't suppress any warnings and make them into errors.
         "-Wa,--warn", "-Wa,--fatal-warnings",
         -- Define the stack as non-executable for paging purposes.
         "-Wa,--noexecstack",
         -- For the ".size" directive, raise an error if the size is invalid.
         "-Wa,--size-check=error",
         -- Optimise the machine code for no particular CPU family.
         "-Wa,-mtune=generic64",
         -- Raise an error if certain operands are invalid.
         "-Wa,-moperand-check=error",
         -- GAS supports Intel syntax. Prefer using that at all times.
         "-Wa,-msyntax=intel",
         -- Also use Intel-style mnemonics/instruction names. They're cleaner.
         "-Wa,-mmnemonic=intel",
         -- Avoid the pointless AT&T-style register prefix.
         "-Wa,-mnaked-reg");

      GAS_Debug_Switches :=
        (-- Output debugging information in any preferred format.
         "-Wa,--gen-debug");

      CASE
         Build
      IS
         WHEN "Final" =>
            FOR default_switches("Ada") USE
               GCC_Basic_Switches &
               Ada_Basic_Switches &
               Ada_Style_Switches &
               Ada_Final_Switches;
            FOR default_switches("ASM") USE
               GAS_Basic_Switches;
            FOR default_switches("C")   USE
               GCC_Basic_Switches &
               C_Basic_Switches;
         WHEN "Debug" =>
            FOR default_switches("Ada") USE
               GCC_Basic_Switches &
               Ada_Basic_Switches &
               Ada_Style_Switches &
               Ada_Debug_Switches;
            FOR default_switches("ASM") USE
               GAS_Basic_Switches &
               GAS_Debug_Switches;
            FOR default_switches("C")   USE
               GCC_Basic_Switches &
               C_Basic_Switches &
               C_Debug_Switches;
      END CASE;
   END Compiler;

   PACKAGE Binder
   IS -- `gnatbind`
      FOR default_switches("Ada") USE
        (-- Static GNAT runtime.
         "-static",
         -- Check if the source files actually exist and are findable;
         -- otherwise, raise an error.
         "-s", "-E");
   END Binder;

   PACKAGE Linker
   IS -- `gnatlink` or `ld`
      Linker_Basic_Switches :=
        (-- Static GNAT runtime.
         "-static",
         -- No standard library initialisation e.g. constructors.
         "-nostartfiles",
         -- The custom linker script to be used which defines the entry
         -- point to the assembly file turned object.
         "-T./../../../source/operating_system/linker.ld",
         -- Don't generate a build ID. We have no need for this. Some versions
         -- of `ld` make it automatically while others need it to be specified.
         "-Wl,--build-id=none",
         -- Include the GCC library.
         "-lgcc", "-static-libgcc",
         -- HAVK only uses 4 KiB pages for now.
         "-zcommon-page-size=0x1000", "-zmax-page-size=0x1000",
         -- Add the path for the mixed Ada/C runtime library that all operating
         -- system programs use (as of now).
         "-L./../adalib/",
         -- Specify the main library to be used by the task.
         "-lhavk_operating_system_runtime");

      Linker_Final_Switches :=
        (-- Remove any unused dead code and data from the program file,
         -- just to make it smaller.
         "-Wl,--gc-sections",
         -- Strip the symbols in the discarded sections.
         "-Wl,--strip-discarded");

      Linker_Debug_Switches :=
        (-- Do not discard any local symbols.
         "-Wl,--discard-none",
         -- The binder source file now is compiled with debug information. This
         -- is likely ignored for direct `ld` usage.
         "-g");

      CASE
         Build
      IS
         WHEN "Final" =>
            FOR default_switches("Ada") USE
               Linker_Basic_Switches &
               Linker_Final_Switches;
            FOR default_switches("ASM") USE
               Linker_Basic_Switches &
               Linker_Final_Switches;
            FOR default_switches("C")   USE
               Linker_Basic_Switches &
               Linker_Final_Switches;
         WHEN "Debug" =>
            FOR default_switches("Ada") USE
               Linker_Basic_Switches &
               Linker_Debug_Switches;
            FOR default_switches("ASM") USE
               Linker_Basic_Switches &
               Linker_Final_Switches;
            FOR default_switches("C")   USE
               Linker_Basic_Switches &
               Linker_Final_Switches;
      END CASE;
   END Linker;
END HAVK_Operating_System_Program;
